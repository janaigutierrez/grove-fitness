const Groq = require('groq-sdk');

const groq = new Groq({
    apiKey: process.env.GROQ_API_KEY
});

// Model a utilitzar (Groq en t√© diversos)
const MODEL = 'llama-3.3-70b-versatile'; // M√©s r√†pid i gratu√Øt
// const MODEL = 'mixtral-8x7b-32768'; // Alternativa

// System prompts segons personalitat del coach
const COACH_PERSONALITIES = {
    motivador: `Ets Grove, un entrenador personal motivador i energ√®tic. 
El teu estil √©s:
- Molt entusiasta i positiu üî•
- Uses emojis freq√ºentment
- Celebres cada assoliment, per petit que sigui
- Dones √†nims constants
- Ets com un amic que sempre t'impulsa
- Uses frases com "ANEM!", "BRUTAL!", "A PER AIX√í!"
- Sempre veus el costat positiu

IMPORTANT: MAI generis plans d'entrenament sense que l'usuari t'ho demani expl√≠citament.
Nom√©s respon al que et pregunten.`,

    analitico: `Ets Grove, un entrenador personal anal√≠tic i cient√≠fic.
El teu estil √©s:
- Basat en dades i evid√®ncia
- Expliques el "per qu√®" de les coses
- Refer√®ncies a estudis i principis cient√≠fics
- Detallat en les explicacions
- Uses termes t√®cnics per√≤ els expliques
- Menys emojis, m√©s professional
- Dones m√®triques i n√∫meros concrets

IMPORTANT: MAI generis plans d'entrenament sense que l'usuari t'ho demani expl√≠citament.
Nom√©s respon al que et pregunten.`,

    bestia: `Ets Grove, un entrenador personal intens estil "Mode B√®stia".
El teu estil √©s:
- Directe i sense embuts
- Retador per√≤ sempre amb respecte
- Uses llenguatge fort per√≤ motivador
- Celebres amb intensitat: "BESTIAL!", "√àPIC!", "M√ÄQUINA!"
- No acceptes excuses, per√≤ entens limitacions reals
- Ets el coach que et treu de la teva zona de confort
- Uses molt el terme "B√àSTIA" üí™

IMPORTANT: MAI generis plans d'entrenament sense que l'usuari t'ho demani expl√≠citament.
Nom√©s respon al que et pregunten.`,

    relajado: `Ets Grove, un entrenador personal relaxat i amigable.
El teu estil √©s:
- Tranquil i sense pressi√≥
- Recolzes el progr√©s al teu propi ritme
- Enfocat en gaudir del proc√©s
- Flexible i comprensiu
- Uses emojis relaxats üòä
- Evites crear ansietat o pressi√≥
- Frases com "Sense pressa", "Al teu ritme", "Gaudeix del proc√©s"

IMPORTANT: MAI generis plans d'entrenament sense que l'usuari t'ho demani expl√≠citament.
Nom√©s respon al que et pregunten.`
};

// Helper: Obtenir system prompt segons personalitat
const getSystemPrompt = (personality = 'motivador', userContext = {}) => {
    const basePrompt = COACH_PERSONALITIES[personality] || COACH_PERSONALITIES.motivador;

    const contextInfo = userContext.name ? `
L'usuari es diu ${userContext.name}.
Nivell de fitness: ${userContext.fitness_level || 'intermedi'}
Equipament disponible: ${userContext.available_equipment?.join(', ') || 'pes corporal'}
Objectius: ${userContext.goals?.join(', ') || 'fitness general'}

${userContext.recent_sessions?.length > 0 ? `
HISTORIAL RECENT:
${userContext.recent_sessions.map(s =>
        `- ${s.workout} (Dificultat: ${s.difficulty}/10, Energia: ${s.energy}/10, Humor: ${s.mood})`
    ).join('\n')}

Dificultat mitjana dels √∫ltims entrenaments: ${userContext.avg_difficulty}/10
` : ''}

${userContext.top_exercises?.length > 0 ? `
Exercicis favorits (m√©s fets):
${userContext.top_exercises.map(e => `- ${e.name} (${e.times} vegades)`).join('\n')}
` : ''}

IMPORTANT: Tingues en compte aquest hist√≤ric per adaptar la dificultat i els exercicis.
` : '';

    return `${basePrompt}

${contextInfo}

REGLES IMPORTANTS:
1. Respon SEMPRE en l'idioma en qu√® l'usuari t'escriu (catal√†, castell√†, angl√®s, etc.)
2. Sigues conc√≠s per√≤ complet
3. Si et demanen generar un pla d'entrenament, retorna un JSON estructurat
4. Si √©s conversa normal, respon en text natural
5. Mant√©n sempre la teva personalitat de coach
6. Si els prompts de l'usuari no tenen res a veure amb entrenament, recondueix educadament cap al fitness
`;
};

// Funci√≥ principal: Chat amb IA
const chat = async (userMessage, conversationHistory = [], personality = 'motivador', userContext = {}) => {
    try {
        const systemPrompt = getSystemPrompt(personality, userContext);

        // Construir missatges
        const messages = [
            { role: 'system', content: systemPrompt },
            ...conversationHistory, // Historial previ
            { role: 'user', content: userMessage }
        ];

        const completion = await groq.chat.completions.create({
            model: MODEL,
            messages: messages,
            temperature: 0.7,
            max_tokens: 2000,
            top_p: 1
        });

        const response = completion.choices[0]?.message?.content || 'No he pogut generar resposta';

        return {
            success: true,
            response,
            usage: completion.usage
        };
    } catch (error) {
        console.error('Groq API error:', error);
        return {
            success: false,
            error: error.message,
            response: 'Ho sento, he tingut un problema processant el teu missatge. Pots tornar-ho a intentar?'
        };
    }
};

// Funci√≥ espec√≠fica: Generar workout amb IA
const generateWorkout = async (userPrompt, userContext = {}) => {
    try {
        const systemPrompt = `Ets Grove, un expert en crear plans d'entrenament personalitzats.

INFORMACI√ì DE L'USUARI:
- Nivell: ${userContext.fitness_level || 'intermedi'}
- Equipament: ${userContext.available_equipment?.join(', ') || 'pes corporal'}
- Temps disponible: ${userContext.time_per_session || '30-45'} minuts
- Dies per setmana: ${userContext.days_per_week || '4'}
- Objectius: ${userContext.goals?.join(', ') || 'fitness general'}
- Ubicaci√≥: ${userContext.workout_location || 'casa'}

${userContext.recent_sessions?.length > 0 ? `
HISTORIAL RECENT:
${userContext.recent_sessions.map(s =>
            `- ${s.workout} (Dificultat: ${s.difficulty}/10)`
        ).join('\n')}
Dificultat mitjana: ${userContext.avg_difficulty}/10
` : ''}

IMPORTANT: Has de respondre NOM√âS amb un JSON v√†lid, sense text addicional, sense markdown, sense explicacions.

El JSON ha de tenir aquesta estructura EXACTA:
{
  "name": "Nom del workout",
  "description": "Descripci√≥ breu",
  "workout_type": "push|pull|legs|full_body|cardio|custom",
  "difficulty": "beginner|intermediate|advanced",
  "estimated_duration_minutes": n√∫mero,
  "exercises": [
    {
      "name": "Nom de l'exercici",
      "type": "reps|time|cardio",
      "category": "chest|back|legs|shoulders|arms|core|cardio",
      "muscle_groups": ["pectoral", "triceps"],
      "equipment": ["bodyweight", "dumbbells"],
      "sets": 3,
      "reps": 12,
      "rest_seconds": 60,
      "notes": "Instruccions espec√≠fiques"
    }
  ],
  "ai_notes": "Notes addicionals del coach"
}

REGLES:
1. Nom√©s exercicis amb l'equipament disponible
2. Adaptat al nivell de l'usuari
3. Durada respectant el temps disponible
4. Tingues en compte la dificultat mitjana de sessions anteriors
5. Nom de l'exercici en l'idioma del prompt de l'usuari
6. NOM√âS JSON, sense res m√©s`;

        const completion = await groq.chat.completions.create({
            model: MODEL,
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userPrompt }
            ],
            temperature: 0.7,
            max_tokens: 3000
        });

        const response = completion.choices[0]?.message?.content || '';

        // Intentar parsejar JSON
        try {
            // Netejar resposta (per si ve amb markdown)
            let cleanedResponse = response.trim();
            cleanedResponse = cleanedResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');

            const workoutData = JSON.parse(cleanedResponse);

            return {
                success: true,
                workout: workoutData,
                raw_response: response
            };
        } catch (parseError) {
            console.error('JSON parse error:', parseError);
            return {
                success: false,
                error: 'No he pogut generar un workout v√†lid. Resposta de IA no √©s JSON.',
                raw_response: response
            };
        }
    } catch (error) {
        console.error('Generate workout error:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

// Funci√≥: Analitzar progr√©s de l'usuari
const analyzeProgress = async (userStats, personality = 'motivador') => {
    try {
        const systemPrompt = getSystemPrompt(personality);

        const statsPrompt = `Analitza el progr√©s d'aquest usuari i dona feedback:

ESTAD√çSTIQUES:
- Total workouts: ${userStats.totalWorkouts || 0}
- Aquesta setmana: ${userStats.thisWeekWorkouts || 0}
- Ratxa actual: ${userStats.currentStreak || 0} dies
- Volum total aixecat: ${userStats.totalVolume || 0} kg
- Millor exercici: ${userStats.bestExercise || 'N/A'}
- Progr√©s vs mes passat: ${userStats.progressVsLastMonth || 'N/A'}

Dona un feedback motivador de m√†xim 3 frases, ressaltant el positiu i suggerint millores.`;

        const completion = await groq.chat.completions.create({
            model: MODEL,
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: statsPrompt }
            ],
            temperature: 0.8,
            max_tokens: 500
        });

        return {
            success: true,
            feedback: completion.choices[0]?.message?.content || ''
        };
    } catch (error) {
        console.error('Analyze progress error:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

// Funci√≥: Respondre preguntes sobre fitness
const answerFitnessQuestion = async (question, personality = 'motivador') => {
    try {
        const systemPrompt = `${getSystemPrompt(personality)}

Ets un expert en fitness, nutrici√≥ i entrenament. Respon preguntes amb informaci√≥ precisa, cient√≠fica per√≤ accessible.
Mant√©n la teva personalitat de coach ${personality}.
Respon SEMPRE en l'idioma en qu√® et facin la pregunta.`;

        const completion = await groq.chat.completions.create({
            model: MODEL,
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: question }
            ],
            temperature: 0.7,
            max_tokens: 1000
        });

        return {
            success: true,
            answer: completion.choices[0]?.message?.content || ''
        };
    } catch (error) {
        console.error('Answer question error:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

module.exports = {
    chat,
    generateWorkout,
    analyzeProgress,
    answerFitnessQuestion
};