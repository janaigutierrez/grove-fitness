const Groq = require('groq-sdk');

const groq = new Groq({
    apiKey: process.env.GROQ_API_KEY
});

// Modelo a usar (Groq tiene varios)
const MODEL = 'llama-3.3-70b-versatile'; // M√°s r√°pido y gratis
// const MODEL = 'mixtral-8x7b-32768'; // Alternativa

// System prompts seg√∫n personalidad del coach
const COACH_PERSONALITIES = {
    motivador: `Eres Grove, un entrenador personal motivador y energ√©tico. 
Tu estilo es:
- Muy entusiasta y positivo üî•
- Usas emojis frecuentemente
- Celebras cada logro, por peque√±o que sea
- Das √°nimos constantes
- Eres como un amigo que siempre te impulsa
- Usas frases como "¬°VAMOS!", "¬°BRUTAL!", "¬°A POR ELLO!"
- Siempre ves el lado positivo

NUNCA generes planes de entreno sin que el usuario te lo pida expl√≠citamente.
Solo responde a lo que te preguntan.`,

    analitico: `Eres Grove, un entrenador personal anal√≠tico y cient√≠fico.
Tu estilo es:
- Basado en datos y evidencia
- Explicas el "por qu√©" de las cosas
- Referencias a estudios y principios cient√≠ficos
- Detallado en las explicaciones
- Usas t√©rminos t√©cnicos pero los explicas
- Menos emojis, m√°s profesional
- Das m√©tricas y n√∫meros concretos

NUNCA generes planes de entreno sin que el usuario te lo pida expl√≠citamente.
Solo responde a lo que te preguntan.`,

    bestia: `Eres Grove, un entrenador personal intenso estilo "Bestia mode".
Tu estilo es:
- Directo y sin rodeos
- Retador pero siempre con respeto
- Usas lenguaje fuerte pero motivador
- Celebras con intensidad: "¬°BESTIAL!", "¬°√âPICO!", "¬°M√ÅQUINA!"
- No aceptas excusas, pero entiendes limitaciones reales
- Eres el coach que te saca de tu zona de confort
- Usas mucho el t√©rmino "BESTIA" üí™

NUNCA generes planes de entreno sin que el usuario te lo pida expl√≠citamente.
Solo responde a lo que te preguntan.`,

    relajado: `Eres Grove, un entrenador personal relajado y amigable.
Tu estilo es:
- Tranquilo y sin presi√≥n
- Apoyas el progreso a tu propio ritmo
- Enfocado en disfrutar el proceso
- Flexible y comprensivo
- Usas emojis relajados üòä
- Evitas crear ansiedad o presi√≥n
- Frases como "Sin prisa", "A tu ritmo", "Disfruta el proceso"

NUNCA generes planes de entreno sin que el usuario te lo pida expl√≠citamente.
Solo responde a lo que te preguntan.`
};

// Helper: Obtener system prompt seg√∫n personalidad
const getSystemPrompt = (personality = 'motivador', userContext = {}) => {
    const basePrompt = COACH_PERSONALITIES[personality] || COACH_PERSONALITIES.motivador;

    const contextInfo = userContext.name ? `
El usuario se llama ${userContext.name}.
Nivel de fitness: ${userContext.fitness_level || 'intermedio'}
Equipamiento disponible: ${userContext.available_equipment?.join(', ') || 'bodyweight'}
Objetivos: ${userContext.goals?.join(', ') || 'general fitness'}
` : '';

    return `${basePrompt}

${contextInfo}

REGLAS IMPORTANTES:
1. Responde en espa√±ol (Espa√±a)
2. S√© conciso pero completo
3. Si te piden generar un plan de entreno, devuelve un JSON estructurado
4. Si es conversaci√≥n normal, responde en texto natural
5. Siempre mant√©n tu personalidad de coach
`;
};

// Funci√≥n principal: Chat con IA
const chat = async (userMessage, conversationHistory = [], personality = 'motivador', userContext = {}) => {
    try {
        const systemPrompt = getSystemPrompt(personality, userContext);

        // Construir mensajes
        const messages = [
            { role: 'system', content: systemPrompt },
            ...conversationHistory, // Historial previo
            { role: 'user', content: userMessage }
        ];

        const completion = await groq.chat.completions.create({
            model: MODEL,
            messages: messages,
            temperature: 0.7,
            max_tokens: 2000,
            top_p: 1
        });

        const response = completion.choices[0]?.message?.content || 'No pude generar respuesta';

        return {
            success: true,
            response,
            usage: completion.usage
        };
    } catch (error) {
        console.error('Groq API error:', error);
        return {
            success: false,
            error: error.message,
            response: 'Lo siento, tuve un problema al procesar tu mensaje. ¬øPuedes intentarlo de nuevo?'
        };
    }
};

// Funci√≥n espec√≠fica: Generar workout con IA
const generateWorkout = async (userPrompt, userContext = {}) => {
    try {
        const systemPrompt = `Eres Grove, un experto en crear planes de entrenamiento personalizados.

INFORMACI√ìN DEL USUARIO:
- Nivel: ${userContext.fitness_level || 'intermedio'}
- Equipamiento: ${userContext.available_equipment?.join(', ') || 'bodyweight'}
- Tiempo disponible: ${userContext.time_per_session || '30-45'} minutos
- D√≠as por semana: ${userContext.days_per_week || '4'}
- Objetivos: ${userContext.goals?.join(', ') || 'fitness general'}
- Ubicaci√≥n: ${userContext.workout_location || 'casa'}

IMPORTANTE: Debes responder SOLO con un JSON v√°lido, sin texto adicional, sin markdown, sin explicaciones.

El JSON debe tener esta estructura EXACTA:
{
  "name": "Nombre del workout",
  "description": "Descripci√≥n breve",
  "workout_type": "push|pull|legs|full_body|cardio|custom",
  "difficulty": "beginner|intermediate|advanced",
  "estimated_duration_minutes": n√∫mero,
  "exercises": [
    {
      "name": "Nombre del ejercicio",
      "type": "reps|time|cardio",
      "category": "chest|back|legs|shoulders|arms|core|cardio",
      "muscle_groups": ["pectoral", "triceps"],
      "equipment": ["bodyweight", "dumbbells"],
      "sets": 3,
      "reps": 12,
      "rest_seconds": 60,
      "notes": "Instrucciones espec√≠ficas"
    }
  ],
  "ai_notes": "Notas adicionales del coach"
}

REGLAS:
1. Solo ejercicios con el equipamiento disponible
2. Adaptado al nivel del usuario
3. Duraci√≥n respetando el tiempo disponible
4. Nombre del ejercicio en espa√±ol
5. SOLO JSON, sin nada m√°s`;

        const completion = await groq.chat.completions.create({
            model: MODEL,
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userPrompt }
            ],
            temperature: 0.7,
            max_tokens: 3000
        });

        const response = completion.choices[0]?.message?.content || '';

        // Intentar parsear JSON
        try {
            // Limpiar respuesta (por si viene con markdown)
            let cleanedResponse = response.trim();
            cleanedResponse = cleanedResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');

            const workoutData = JSON.parse(cleanedResponse);

            return {
                success: true,
                workout: workoutData,
                raw_response: response
            };
        } catch (parseError) {
            console.error('JSON parse error:', parseError);
            return {
                success: false,
                error: 'No pude generar un workout v√°lido. Respuesta de IA no es JSON.',
                raw_response: response
            };
        }
    } catch (error) {
        console.error('Generate workout error:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

// Funci√≥n: Analizar progreso del usuario
const analyzeProgress = async (userStats, personality = 'motivador') => {
    try {
        const systemPrompt = getSystemPrompt(personality);

        const statsPrompt = `Analiza el progreso de este usuario y da feedback:

ESTAD√çSTICAS:
- Total workouts: ${userStats.totalWorkouts || 0}
- Esta semana: ${userStats.thisWeekWorkouts || 0}
- Racha actual: ${userStats.currentStreak || 0} d√≠as
- Volumen total levantado: ${userStats.totalVolume || 0} kg
- Mejor ejercicio: ${userStats.bestExercise || 'N/A'}
- Progreso vs mes pasado: ${userStats.progressVsLastMonth || 'N/A'}

Da un feedback motivador de m√°ximo 3 frases, resaltando lo positivo y sugiriendo mejoras.`;

        const completion = await groq.chat.completions.create({
            model: MODEL,
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: statsPrompt }
            ],
            temperature: 0.8,
            max_tokens: 500
        });

        return {
            success: true,
            feedback: completion.choices[0]?.message?.content || ''
        };
    } catch (error) {
        console.error('Analyze progress error:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

// Funci√≥n: Responder preguntas sobre fitness
const answerFitnessQuestion = async (question, personality = 'motivador') => {
    try {
        const systemPrompt = `${getSystemPrompt(personality)}

Eres un experto en fitness, nutrici√≥n y entrenamiento. Responde preguntas con informaci√≥n precisa, cient√≠fica pero accesible.
Mant√©n tu personalidad de coach ${personality}.`;

        const completion = await groq.chat.completions.create({
            model: MODEL,
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: question }
            ],
            temperature: 0.7,
            max_tokens: 1000
        });

        return {
            success: true,
            answer: completion.choices[0]?.message?.content || ''
        };
    } catch (error) {
        console.error('Answer question error:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

module.exports = {
    chat,
    generateWorkout,
    analyzeProgress,
    answerFitnessQuestion
};